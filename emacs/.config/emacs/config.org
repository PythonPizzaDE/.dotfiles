#+TITLE: Paul Frische's emacs config
#+AUTHOR: Paul Frische
#+DESCRIPTION: Paul Frische's emacs config
#+STARTUP: hideblocks
#+OPTIONS: toc:2

* Variables
#+begin_src emacs-lisp
  (defvar pf/default-font-size 120)
  (defvar pf/default-variable-font-size 120)
  (defvar pf/frame-transparency '(100 . 100))
  (defvar pf/font-family "JetBrains Mono Nerd Font")

  ;; make emacs find pyls
  (setenv "PATH" (concat
                  (getenv "PATH")
                  (concat
                   (concat ":"
                           (getenv "HOME") "/.local/bin"))))
#+end_src

* Basic UI Config
Activate line numbers, disable scrollbars and do some transparency.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  ;; (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha pf/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,pf/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
* Startup Performance
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun pf/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'pf/display-startup-time)
#+end_src

* Package Setup
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src
* Automatic Package Update
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

* No littering
#+begin_src emacs-lisp
  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
                                          ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* UI Config
** Color Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-one t))
#+end_src
** Modeline
*NOTE*: You'll need to run `M-x all-the-icons-install-fonts` the first time you use this config on your (new) machine to install the icons.
#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src
** WHICH KEY
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src
** Ivy and Counsel
Ivy is an excellent completion framework for Emacs. It provides a minimal yet powerful selection menu that appears when you open files,
switch buffers, and for many other tasks in Emacs. Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`,
etc which provide useful commands for each of the default completion commands.

ivy-rich adds extra columns to a few of the Counsel commands to provide more information about each item.
(Quoted from https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org)
#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("RET" . ivy-alt-done)
           ("C-n" . ivy-next-line)
           ("C-p" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-p" . ivy-previous-line)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-p" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))
#+end_src
** Font Config
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font pf/font-family :height pf/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font pf/font-family :height pf/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font pf/font-family :height pf/default-variable-font-size :weight 'regular)

#+end_src

* Key Bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :after evil
    :config
    (general-create-definer pf/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (pf/leader-keys
      "s" '(:ignore t :which-key "splits")
      "sh" '(split-window-below :which-key "horizontal split")
      "sv" '(split-window-right :which-key "vertical split")
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))

  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src


* Org Mode
** TOC
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** ORG BULLETS
Show bullets instead of asterisks.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Center Org Buffers
#+begin_src emacs-lisp
  (defun pf/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . pf/org-mode-visual-fill))
#+end_src

* Development
** LSP
*** lsp mode
The which-key integration adds helpful descriptions of the various keys so you should be able
to learn a lot just by pressing C-c l in a lsp-mode buffer and trying different things
that you find there.
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (
           (prog-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration)
           )
    :commands lsp)
             #+end_src
*** company mode
#+begin_src emacs-lisp
  (use-package company)
#+end_src
*** lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src
*** lsp-ivy
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :after lsp)
#+end_src
* SCROLLING
#+begin_src emacs-lisp
  (setq scroll-margin 8)

  ;; Make scrolling *smooth*
  (setq scroll-down-aggressively nil)
  (setq scroll-up-aggressively nil)
  (setq scroll-conservatively 1)
#+end_src
